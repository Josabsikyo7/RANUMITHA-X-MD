const { cmd } = require('../command');
const translate = require('@vitalets/google-translate-api'); // install this: npm i @vitalets/google-translate-api

// Language menu
const langMenu = `
‚ï≠‚îÄ„Äé üåç ùóßùó•ùóîùó°ùó¶ùóüùóîùóßùóò ùó†ùóòùó°ùó® „Äè‚îÄ‚îÄ‚îÄ‚ùè
‚îÇ 1. Sinhala (si)
‚îÇ 2. English (en)
‚îÇ 3. Hindi (hi)
‚îÇ 4. Tamil (ta)
‚îÇ 5. Arabic (ar)
‚îÇ 6. French (fr)
‚îÇ 7. German (de)
‚îÇ 8. Japanese (ja)
‚îÇ 9. Chinese (zh-cn)
‚îÇ 10. Russian (ru)
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Reply with the number (e.g., 2)`;

cmd({
  pattern: "translate",
  desc: "Translate any text to selected language",
  category: "tools",
  react: "üåç",
  filename: __filename
}, async (conn, mek, m, { from, reply }) => {
  try {
    // Step 1: get the text after command
    let text = m.body.split(" ").slice(1).join(" ");
    if (!text) return reply("‚úèÔ∏è Please provide a text to translate.\n\nUsage: .translate Hello world");

    // Step 2: ask for target language
    const ask = await conn.sendMessage(from, { text: `üìå Which language do you want?\n${langMenu}\n\nüëâ Reply with number` }, { quoted: mek });
    const msgID = ask.key.id;

    // Step 3: listen for reply
    conn.ev.on("messages.upsert", async (msgUpdate) => {
      const msg = msgUpdate.messages[0];
      if (!msg.message) return;

      const fromUser = msg.key.remoteJid;
      const userReply = msg.message.conversation || msg.message.extendedTextMessage?.text;
      const quotedId = msg.message?.extendedTextMessage?.contextInfo?.stanzaId;

      if (quotedId !== msgID) return; // only reply to our menu

      // Language map
      const langMap = {
        "1": "si",
        "2": "en",
        "3": "hi",
        "4": "ta",
        "5": "ar",
        "6": "fr",
        "7": "de",
        "8": "ja",
        "9": "zh-cn",
        "10": "ru"
      };

      const lang = langMap[userReply.trim()];
      if (!lang) {
        return conn.sendMessage(fromUser, { text: "‚ùå Invalid choice! Please reply with 1-10" }, { quoted: msg });
      }

      // Step 4: translate
      try {
        const res = await translate(text, { to: lang });
        await conn.sendMessage(fromUser, { text: `üåç *Translated (${lang})*\n\n${res.text}` }, { quoted: msg });
      } catch (e) {
        await conn.sendMessage(fromUser, { text: "‚ö†Ô∏è Translation failed!" }, { quoted: msg });
      }
    });

  } catch (e) {
    console.error(e);
    reply("‚ùå Error: " + e.message);
  }
});
